#### examine file ####
select * from `dfs`.`/Users/jblue/BreachDetection/sample.json` limit 5;

#### generate some account frequencies ####
select acct,count(*) from `dfs`.`/Users/jblue/BreachDetection/sample.json`
  group by acct
  limit 5;


### count all frauds / non-frauds
select sum(totalFraud) as `countFraud`,
  sum(totalNonFraud) as `countNonFraud` from
  ( select case when fraud='1' then 1 else 0 end as `totalFraud`,
      case when fraud='0' then 1 else 0 end as `totalNonFraud`
      from ( select distinct acct,fraud 
	from `dfs`.`/Users/jblue/BreachDetection/sample.json`)
)
;

#### individual merchant counts ######
select merchant, sum(merchFraud) as `merchCountFraud`,
  sum(merchNonFraud) as `merchCountNonFraud` from
  (select merchant,
  case when fraud='1' then 1 else 0 end as `merchFraud`,
  case when fraud='0' then 1 else 0 end as `merchNonFraud`
  from `dfs`.`/Users/jblue/BreachDetection/sample.json`)
  group by merchant
  limit 5
;

#### make sure your UDF is setup properly before you attempt next step ####
#### this query creates the counts, calculates logL then sorts and shows highest results ###
select MERCH.merchant,
	MERCH.merchCountFraud as `n11`,
	MERCH.merchCountNonFraud as `n21`,
	COUNTS.countFraud as `n1dot`,
	COUNTS.countNonFraud as `n2dot`,
  	loglikelihood(cast(MERCH.merchCountFraud as INT),
		cast(MERCH.merchCountNonFraud as INT),
		cast(COUNTS.countFraud as INT),
		cast(COUNTS.countNonFraud as INT)) as `logLike` from (
	select 1 as `dummy`,merchant,
	  sum(merchFraud) as `merchCountFraud`,
	  sum(merchNonFraud) as `merchCountNonFraud` from 
     	  (select merchant, 
	  case when fraud='1' then 1 else 0 end as `merchFraud`,
	  case when fraud='0' then 1 else 0 end as `merchNonFraud`
	  from `dfs`.`/Users/jblue/BreachDetection/sample.json`
	)
group by merchant) `MERCH`
JOIN ( select 1 as `dummy`, 
	sum(totalFraud) as `countFraud`, 
	sum(totalNonFraud) as `countNonFraud` from 
	( select case when fraud='1' then 1 else 0 end as `totalFraud`,
	   case when fraud='0' then 1 else 0 end as `totalNonFraud`
  	   from ( select distinct acct,fraud from `dfs`.`/Users/jblue/BreachDetection/sample.json`)
)) `COUNTS`
on MERCH.dummy=COUNTS.dummy
ORDER by loglike desc
limit 10 ;

